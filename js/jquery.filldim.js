// Generated by CoffeeScript 1.4.0
/*
  TODO: data-width and .filldim.justifyright or .filldim.justifyleft
        De-couple setting configurations and rendering
        Add event hooks
        Add compiled JS to bootstrap-all.js in vubstrap
        Import LESS files into bootstrap
        Commit everything to GitHub
  Filldim jQuery plugin
  @element.data('dims')
  @element.data('target')  = element around which to wrap
*/

(function($) {
  var FillDim;
  $.filldim = {
    justify: 'none'
  };
  $.fn.filldim = function(options, trigger) {
    var defaults,
      _this = this;
    defaults = $.extend({}, $.filldim, {
      target: this.selector
    });
    return this.each(function(index) {
      var data, el, justify, opts;
      el = _this.eq(index);
      data = el.data('FillDim');
      if ($.isEmptyObject(data)) {
        opts = $.extend({}, defaults, {
          dims: el.data('dims'),
          target: el.data('target'),
          width: el.data('width')
        }, options);
        justify = el.prop('class').match(/\w+(?=-justify)/);
        if (justify !== null) {
          opts.justify = justify[0];
        }
        return el.data('FillDim', new FillDim(el, opts));
      } else if (typeof options === 'string') {
        return data[options](trigger);
      } else {
        return null;
      }
    });
  };
  return FillDim = (function() {

    FillDim.wrapperClass = 'filldim-wrapper';

    FillDim.targetClass = 'filldim-target';

    FillDim.getWrapper = function(selector) {
      if (selector == null) {
        selector = FillDim.wrapperClass;
      }
      return $('<div>').addClass(selector);
    };

    function FillDim(element, opts) {
      this.opts = opts;
      console.log(this.opts);
      this.initialized = false;
      this["native"] = false;
      this.element = element;
      this.setDims();
      this.setTarget();
      this.setWrapper();
      this.initialized = true;
    }

    FillDim.prototype.render = function() {
      this.setTarget();
      return this.setWrapper();
    };

    FillDim.prototype.hasWrapper = function() {
      var selector, _i, _len, _ref;
      if (this.wrapper !== void 0) {
        return this.wrapper;
      }
      _ref = ["." + FillDim.wrapperClass, '.filldim-widescreen', '.filldim-standard'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        selector = _ref[_i];
        if (this.element.parent(selector).length > 0) {
          return selector;
        }
      }
      return false;
    };

    FillDim.prototype.setWrapper = function(selector) {
      var target, wrapper;
      if (selector == null) {
        selector = FillDim.wrapperClass;
      }
      wrapper = this.hasWrapper();
      if (!wrapper) {
        target = (this.hasTarget() ? this.getTarget() : this.element);
        target.wrap(FillDim.getWrapper(selector));
        return this.wrapper = "." + selector;
      } else {
        if (!this.initialized) {
          this["native"] = true;
        }
        return this.wrapper = wrapper;
      }
    };

    FillDim.prototype.getWrapper = function() {
      return this.element.parent(this.wrapper);
    };

    FillDim.prototype.hasTarget = function() {
      if (this.target !== void 0) {
        return true;
      }
      return this.getTarget().length > 0;
    };

    FillDim.prototype.setTarget = function(target) {
      var obj;
      if (target == null) {
        target = this.opts.target;
      }
      obj = this.element.closest(target);
      if (obj.length === 0) {
        obj = this.element;
        target = this.opts.target;
      }
      if (this.hasTarget()) {
        this.getTarget().removeClass(FillDim.targetClass);
      }
      obj.addClass(FillDim.targetClass);
      return this.target = target;
    };

    FillDim.prototype.getTarget = function() {
      return this.element.closest("." + FillDim.targetClass);
    };

    FillDim.prototype.calcDims = function() {
      var cols, rows, target;
      target = (this.hasTarget() ? this.getTarget() : this.element);
      cols = target.attr('width');
      rows = target.attr('height');
      if (cols === void 0 || rows === void 0) {
        cols = target.width();
        rows = target.height();
      } else {
        cols = parseFloat(cols, 10);
        rows = parseFloat(rows, 10);
      }
      return rows / cols;
    };

    FillDim.prototype.setDims = function(dims) {
      if (dims == null) {
        dims = this.opts.dims;
      }
      console.log("setDims: " + dims);
      if (!this.initialized && this["native"]) {
        return null;
      }
      if (dims == null) {
        dims = this.dims || this.calcDims();
      }
      this.dims = this.parseDimString(dims);
      if (this.hasWrapper()) {
        this.getWrapper().css('padding-top', this.getDims());
      }
      return this.dims;
    };

    FillDim.prototype.getDims = function() {
      return "" + (this.dims * 100) + "%";
    };

    FillDim.prototype.parseDimString = function(str) {
      var cols, num, rows, _ref;
      str = str.toString(10);
      if (/:/.test(str)) {
        _ref = str.split(':'), cols = _ref[0], rows = _ref[1];
        return rows / cols;
      } else {
        num = parseFloat(str, 10);
        if (/%/.test(str)) {
          num /= 100;
        }
        return num;
      }
    };

    return FillDim;

  })();
})(jQuery);
