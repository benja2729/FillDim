// Generated by CoffeeScript 1.6.1
/*
  TODO: data-width and .filldim.justifyright or .filldim.justifyleft
        De-couple setting configurations and rendering
        Add event hooks
        Add compiled JS to bootstrap-all.js in vubstrap
        Import LESS files into bootstrap
        Commit everything to GitHub
  Filldim jQuery plugin
  @element.data('dims')
  @element.data('target')  = element around which to wrap
*/

var __hasProp = {}.hasOwnProperty;

(function($) {
  var FillDim, defaults, events, getAttrOpts, getCssOpts, getInitCSS, init, parseDims, propertyObservers, targetCSS, wrapper;
  defaults = {
    dims: 1,
    width: 1,
    float: 'none'
  };
  wrapper = $('<div>').addClass('filldim-wrapper').css({
    'position': 'relative'
  });
  targetCSS = {
    'width': '100%',
    'height': '100%',
    'position': 'absolute',
    'top': 0,
    'left': 0,
    'float': 'none'
  };
  events = ['propertyWillChange', 'propertyDidChange', 'filldimWillDestroy', 'filldimDidDestroy'];
  propertyObservers = {
    dims: function() {
      var dims, paddingTop, width;
      dims = this.get('dims');
      width = this.get('width');
      paddingTop = (width * parseDims(dims) * 100) + '%';
      return this.get('wrapper').css({
        paddingTop: paddingTop
      });
    },
    width: function() {
      var width;
      width = (this.get('width') * 100) + '%';
      this.get('wrapper').css({
        width: width
      });
      if (this._queue.indexOf('dims') < 0) {
        return propertyObservers.dims.call(this);
      }
    },
    float: function() {
      return this.get('wrapper').css('float', this.get('float'));
    }
  };
  parseDims = function(dims) {
    var d;
    switch ($.type(dims)) {
      case 'number':
        return dims;
      case 'string':
        if (/:/.test(dims)) {
          d = dims.split(':');
          return parseFloat(d[1], 10) / parseFloat(d[0], 10);
        } else {
          return parseFloat(dims, 10) / 100;
        }
        break;
      default:
        return 1;
    }
  };
  FillDim = (function() {

    function FillDim(element, opts) {
      this.element = element;
      this.wrapper();
      this.element.css(targetCSS);
      this.set(opts);
    }

    FillDim.prototype._propertyCache = {};

    FillDim.prototype._queue = [];

    FillDim.prototype.propertiesWillChange = function(props) {
      var prop, value;
      this._queue = [null];
      for (prop in props) {
        if (!__hasProp.call(props, prop)) continue;
        value = props[prop];
        this.set(prop, value);
      }
      return this.propertiesDidChange();
    };

    FillDim.prototype.propertiesDidChange = function() {
      var prop, _i, _len, _ref;
      this._queue.shift();
      _ref = this._queue;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        prop = _ref[_i];
        this.propertyDidChange(prop);
      }
      return this._queue = [];
    };

    FillDim.prototype.propertyWillChange = function(prop) {
      this.element.trigger('propertyWillChange', [prop, this]);
      if (this._queue[0] === null) {
        return this._queue.push(prop);
      } else {
        return this.propertyDidChange(prop);
      }
    };

    FillDim.prototype.propertyDidChange = function(prop) {
      propertyObservers[prop].call(this);
      return this.element.trigger('propertyDidChange', [prop, this]);
    };

    FillDim.prototype.set = function(key, value) {
      var prop;
      if ($.type(key) === 'object') {
        return this.propertiesWillChange(key);
      } else {
        prop = this[key];
        if ($.isFunction(prop)) {
          this._propertyCache[key] = prop.call(this, key, value);
        } else {
          this[key] = value;
        }
        if (propertyObservers[key]) {
          return this.propertyWillChange(key);
        }
      }
    };

    FillDim.prototype.get = function(key) {
      var p, prop;
      p = this._propertyCache;
      if (p[key]) {
        return p[key];
      }
      prop = this[key];
      if ($.isFunction(prop)) {
        return prop.call(this);
      } else {
        return prop;
      }
    };

    FillDim.prototype.wrapper = function() {
      var element, parent;
      element = this.get('element');
      parent = element.parent('[class*="filldim-"]');
      if (parent.length === 0) {
        parent = wrapper.clone();
        element.wrap(parent);
      }
      return parent;
    };

    FillDim.prototype.destroy = function() {
      var el;
      el = this.element;
      el.trigger('filldimWillDestroy');
      el.off(events.slice(0, events.length - 1));
      el.css(this.get('initCSS'));
      el.unwrap();
      el.removeData('filldim');
      el.trigger('filldimDidDestroy');
      return el.off(events.slice(events.length - 1));
    };

    return FillDim;

  })();
  getAttrOpts = function(element) {
    var dims, height, regex, ret, w, width;
    width = element.attr('width');
    dims = element.data('dims');
    ret = {};
    if (width) {
      w = parseFloat(width, 10);
      height = element.attr('height');
      regex = /px/;
      if (height && regex.test(height) && regex.test(width)) {
        ret.dims = parseFloat(height, 10) / w;
      } else if (/%/.test(width)) {
        ret.width = w / 100;
      }
    }
    if (!$.isEmptyObject(dims)) {
      ret.dims = dims;
    }
    return ret;
  };
  getCssOpts = function(element, hash) {
    var dims, float, height, width;
    width = element.width();
    height = element.height();
    console.log(element.parent().width(), width);
    dims = height / width;
    width /= element.parent().width();
    float = hash.float;
    return {
      dims: dims,
      width: width,
      float: float
    };
  };
  getInitCSS = function(element) {
    var key, ret;
    ret = {};
    for (key in targetCSS) {
      if (!__hasProp.call(targetCSS, key)) continue;
      ret[key] = element.css(key);
    }
    return ret;
  };
  init = function(options) {
    var attrOpts, cssOpts, initCSS, opts;
    attrOpts = getAttrOpts(this);
    initCSS = getInitCSS(this);
    cssOpts = getCssOpts(this, initCSS);
    opts = $.extend({}, defaults, cssOpts, attrOpts, options, {
      initCSS: initCSS
    });
    console.log('-------------------');
    console.log({
      defaults: defaults,
      cssOpts: cssOpts,
      attrOpts: attrOpts,
      options: options
    });
    console.log(opts);
    console.log('-------------------');
    return this.data('filldim', new FillDim(this, opts));
  };
  $.fn.filldim = function(options, trigger) {
    var _this = this;
    return this.each(function(index) {
      var data, el;
      el = _this.eq(index);
      data = el.data('filldim');
      if ($.isEmptyObject(data)) {
        return init.call(el, options);
      } else if ($.type(options === 'string' && trigger)) {
        return data.set(options, trigger);
      } else if (options === 'destroy') {
        return data.destroy();
      }
    });
  };
  return $(document).ready(function() {
    return $('.filldim').filldim();
  });
})(jQuery);
